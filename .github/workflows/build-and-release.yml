name: Build and Release Windows Application

on:
  push:
    tags:
      - 'v*'  # Triggers on version tags like v1.2.3
  release:
    types: [published, created]  # Triggers when release is published or created
  workflow_dispatch:  # Allows manual trigger from GitHub Actions tab

permissions:
  contents: write
  packages: read

jobs:
  build-and-release:
    # Using specific Windows version to avoid migration issues
    # windows-latest will migrate to Windows Server 2025 on Sept 2, 2025
    # Using windows-2022 for stability and consistency
    runs-on: windows-2022
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        
        # Check if requirements.txt exists
        if (Test-Path "requirements.txt") {
          echo "Installing from requirements.txt..."
          pip install -r requirements.txt
        } else {
          echo "requirements.txt not found, installing basic dependencies..."
          pip install PyQt5 sqlite3 cryptography requests
        }
        
        # Install additional build dependencies
        pip install pyinstaller cryptography
        
        echo "Dependencies installed successfully"
      shell: powershell
      
    - name: Verify Python environment
      run: |
        echo "Python version:"
        python --version
        
        echo "Installed packages:"
        pip list
        
        echo "Testing main.py imports..."
        python -c "
        try:
            import sys
            import os
            sys.path.insert(0, '.')
            print('Testing basic imports...')
            
            # Test basic imports without running the full app
            print('✅ Python environment ready')
        except Exception as e:
            print(f'❌ Import error: {e}')
            exit(1)
        "
      shell: powershell
        
    - name: Extract version from tag
      id: get_version
      run: |
        $ref = "${{ github.ref_name }}"
        
        # If triggered by workflow_dispatch or from main branch, use version from version.py
        if ($ref -eq "main" -or $ref -notmatch "^v\d+\.\d+\.\d+") {
          if (Test-Path "version.py") {
            $content = Get-Content version.py
            $version = ($content | Select-String '__version__ = "(.+)"' | ForEach-Object { $_.Matches.Groups[1].Value })
            if (-not $version) {
              $version = "2.0.2"  # Default fallback version
            }
          } else {
            $version = "2.0.2"  # Default fallback version
          }
          echo "Using version from version.py or default: $version"
        } else {
          # Extract version from tag (remove 'v' prefix)
          $version = $ref -replace '^v', ''
          echo "Using version from tag: $version"
        }
        
        echo "VERSION=$version" >> $env:GITHUB_OUTPUT
        echo "Final version: $version"
      shell: powershell
      
    - name: Update version in application
      run: |
        $version = "${{ steps.get_version.outputs.VERSION }}"
        $content = Get-Content version.py
        $content = $content -replace '__version__ = ".*"', "__version__ = `"$version`""
        $content | Set-Content version.py
        echo "Updated version.py with version: $version"
      shell: powershell
      
    - name: Build executable with PyInstaller
      run: |
        echo "Starting PyInstaller build..."
        $version = "${{ steps.get_version.outputs.VERSION }}"
        
        # Check if main.py exists
        if (-not (Test-Path "main.py")) {
          echo "ERROR: main.py not found!"
          exit 1
        }
        
        echo "Building SMIS-$version.exe..."
        pyinstaller --onefile --windowed --name "SMIS-$version" main.py --distpath dist --workpath build
        
        # Check if build was successful
        if (-not (Test-Path "dist/SMIS-$version.exe")) {
          echo "ERROR: PyInstaller build failed!"
          exit 1
        }
        
        echo "Build completed successfully: SMIS-$version.exe"
        Get-ChildItem dist -Name
      shell: powershell
        
    - name: Create NSIS installer
      run: |
        $version = "${{ steps.get_version.outputs.VERSION }}"
        if (-not (Test-Path "installer.nsi")) {
          echo "ERROR: installer.nsi not found"; exit 1
        }
        if (-not (Test-Path "dist/SMIS-$version.exe")) {
          echo "ERROR: PyInstaller output dist/SMIS-$version.exe not found"; exit 1
        }
        echo "Listing icon path (resources/icons):"
        if (Test-Path "resources/icons") { Get-ChildItem -Recurse -Path resources/icons } else { echo "resources/icons directory missing" }
        if (Test-Path "resources/icons/app_icon.ico") { echo "Icon file found." } else { echo "WARNING: resources/icons/app_icon.ico not found; build will continue with default icon." }
        # Path to makensis (usually in Program Files (x86))
        $nsis = "C:/Program Files (x86)/NSIS/makensis.exe"
        if (-not (Test-Path $nsis)) { $nsis = "C:/Program Files/NSIS/makensis.exe" }
        if (-not (Test-Path $nsis)) {
          echo "makensis not found. Attempting silent installation of NSIS..."
          $temp = "$env:RUNNER_TEMP/nsis"
          New-Item -ItemType Directory -Force -Path $temp | Out-Null
          $nsisUrl = "https://downloads.sourceforge.net/project/nsis/NSIS%203/3.10/nsis-3.10-setup.exe"
          $installerPath = Join-Path $temp "nsis-setup.exe"
          echo "Downloading NSIS from $nsisUrl"
          Invoke-WebRequest -Uri $nsisUrl -OutFile $installerPath -UseBasicParsing
          if (-not (Test-Path $installerPath)) { echo "ERROR: Failed to download NSIS installer"; exit 1 }
          echo "Running silent NSIS installer..."
          Start-Process -FilePath $installerPath -ArgumentList "/S" -Wait -NoNewWindow
          # Re-check standard install locations
          $nsis = "C:/Program Files (x86)/NSIS/makensis.exe"
          if (-not (Test-Path $nsis)) { $nsis = "C:/Program Files/NSIS/makensis.exe" }
          if (-not (Test-Path $nsis)) { echo "ERROR: makensis still not found after install"; exit 1 }
          echo "NSIS installed successfully. Proceeding with build."
        }
        & "$nsis" /DVERSION=$version installer.nsi
        if ($LASTEXITCODE -ne 0) { echo "NSIS build failed"; exit 1 }
        if (-not (Test-Path "SMIS-Setup-$version.exe")) { echo "ERROR: Expected NSIS output SMIS-Setup-$version.exe missing"; Get-ChildItem -Path . -Filter "SMIS-Setup*"; exit 1 }
        echo "NSIS installer created: SMIS-Setup-$version.exe"
      shell: powershell
      
    - name: Encrypt installer
      run: |
        python -c "
        import os
        from cryptography.fernet import Fernet
        import base64
        
        # Get encryption key from environment
        key = os.environ['ENCRYPT_KEY'].encode()
        # Ensure key is 32 bytes for Fernet (base64 encoded)
        if len(key) != 44:  # 32 bytes base64 encoded = 44 chars
            # If key is not base64, create a proper key
            from cryptography.hazmat.primitives import hashes
            from cryptography.hazmat.primitives.kdf.pbkdf2 import PBKDF2HMAC
            kdf = PBKDF2HMAC(
                algorithm=hashes.SHA256(),
                length=32,
                salt=b'smis_salt_2024',
                iterations=100000,
            )
            key = base64.urlsafe_b64encode(kdf.derive(key))
        
        f = Fernet(key)
        
        version = '${{ steps.get_version.outputs.VERSION }}'
        installer_path = f'SMIS-Setup-{version}.exe'
        encrypted_path = f'SMIS-Setup-{version}-encrypted.exe'
        
        with open(installer_path, 'rb') as file:
            file_data = file.read()
        
        encrypted_data = f.encrypt(file_data)
        
        with open(encrypted_path, 'wb') as file:
            file.write(encrypted_data)
            
        print(f'Encrypted {installer_path} -> {encrypted_path}')
        print(f'Original size: {len(file_data)} bytes')
        print(f'Encrypted size: {len(encrypted_data)} bytes')
        
        # Remove original unencrypted file
        os.remove(installer_path)
        "
      env:
        ENCRYPT_KEY: ${{ secrets.ENCRYPT_KEY }}
        
    - name: Calculate file hashes
      id: hash
      run: |
        $version = "${{ steps.get_version.outputs.VERSION }}"
        $filePath = "SMIS-Setup-$version-encrypted.exe"
        $sha256 = (Get-FileHash -Path $filePath -Algorithm SHA256).Hash
        echo "SHA256=$sha256" >> $env:GITHUB_OUTPUT
        echo "File: $filePath"
        echo "SHA256: $sha256"
      shell: powershell
      
    - name: Create or update release
      id: create_release
      uses: softprops/action-gh-release@v2
      with:
        tag_name: "v${{ steps.get_version.outputs.VERSION }}"
        name: "SMIS v${{ steps.get_version.outputs.VERSION }}"
        make_latest: true
        draft: false
        prerelease: false
        body: |
          ## SMIS v${{ steps.get_version.outputs.VERSION }}
          
          ### What's New
          - Auto-generated release from tag v${{ steps.get_version.outputs.VERSION }}
          - Encrypted installer for enhanced security
          - Built on ${{ github.run_number }} workflow run
          
          ### Installation
          1. Download the encrypted installer below
          2. The application will automatically decrypt and install
          
          ### File Information
          - **File**: SMIS-Setup-${{ steps.get_version.outputs.VERSION }}-encrypted.exe
          - **SHA256**: ${{ steps.hash.outputs.SHA256 }}
          - **Build Date**: ${{ github.event.head_commit.timestamp }}
          
          ### Security
          This installer is encrypted with AES encryption for security.
        files: |
          SMIS-Setup-${{ steps.get_version.outputs.VERSION }}-encrypted.exe
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: smis-installer-v${{ steps.get_version.outputs.VERSION }}
        path: |
          SMIS-Setup-${{ steps.get_version.outputs.VERSION }}-encrypted.exe
        retention-days: 30
        
    - name: Notify build completion
      run: |
        # Ensure consistent encoding (avoid emoji/unicode parsing issues on some runners)
        [Console]::OutputEncoding = [System.Text.Encoding]::UTF8
        $version = "${{ steps.get_version.outputs.VERSION }}"
        $downloadUrl = "https://github.com/ZubairHussainK/smis/releases/tag/v" + $version

        Write-Output "Build completed successfully."
        Write-Output "Release created and updated."
        Write-Output "Encrypted installer uploaded."
        Write-Output ("Version: " + $version)
        Write-Output ("Download URL: " + $downloadUrl)
      shell: powershell