name: Build and Release Windows Application

on:
  push:
    tags:
      - 'v*'  # Triggers on version tags like v1.2.3
  workflow_dispatch:  # Allows manual trigger from GitHub Actions tab

permissions:
  contents: write
  packages: read

jobs:
  build-and-release:
    # Using specific Windows version to avoid migration issues
    # windows-latest will migrate to Windows Server 2025 on Sept 2, 2025
    # Using windows-2022 for stability and consistency
    runs-on: windows-2022
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        
        # Force install critical dependencies first
        Write-Output "Installing critical dependencies..."
        pip install python-dotenv==1.0.0
        pip install PyQt5>=5.15.9
        pip install cryptography==41.0.3
        pip install requests==2.31.0
        pip install pyinstaller
        
        # Check if requirements.txt exists and install additional dependencies
        if (Test-Path "requirements.txt") {
          Write-Output "Installing from requirements.txt..."
          pip install -r requirements.txt
        }
        
        # Force reinstall python-dotenv to ensure it's available
        pip install --force-reinstall python-dotenv==1.0.0
        
        # Verify critical imports
        Write-Output "Verifying critical imports..."
        python -c "
        try:
            from dotenv import load_dotenv
            print('✅ dotenv import successful')
            import PyQt5
            print('✅ PyQt5 import successful') 
            import cryptography
            print('✅ cryptography import successful')
            import requests
            print('✅ requests import successful')
        except ImportError as e:
            print(f'❌ Import error: {e}')
            exit(1)
        "
        
        Write-Output "Dependencies installed successfully"
      shell: powershell
      
    - name: Verify Python environment
      run: |
        Write-Output "Python version:"
        python --version
        
        Write-Output "Installed packages:"
        pip list
        
        Write-Output "Testing main.py imports..."
        python -c "
        try:
            import sys
            import os
            sys.path.insert(0, '.')
            print('Testing basic imports...')
            
            # Test dotenv import specifically
            try:
                from dotenv import load_dotenv
                print('✅ dotenv import successful')
            except ImportError as e:
                print(f'❌ dotenv import failed: {e}')
                print('Installing python-dotenv as fallback...')
                import subprocess
                subprocess.run([sys.executable, '-m', 'pip', 'install', 'python-dotenv'])
                from dotenv import load_dotenv
                print('✅ dotenv import successful after fallback install')
            
            print('✅ Python environment ready')
        except Exception as e:
            print(f'❌ Import error: {e}')
            exit(1)
        "
      shell: powershell
        
    - name: Extract version from tag
      id: get_version
      run: |
        $ref = "${{ github.ref_name }}"
        
        # If triggered by workflow_dispatch or from main branch, use version from version.py
        if ($ref -eq "main" -or $ref -notmatch "^v\d+\.\d+\.\d+") {
          if (Test-Path "version.py") {
            $content = Get-Content version.py
            $version = ($content | Select-String '__version__ = "(.+)"' | ForEach-Object { $_.Matches.Groups[1].Value })
            if (-not $version) {
              $version = "2.0.2"  # Default fallback version
            }
          } else {
            $version = "2.0.2"  # Default fallback version
          }
          Write-Output "Using version from version.py or default: $version"
        } else {
          # Extract version from tag (remove 'v' prefix)
          $version = $ref -replace '^v', ''
          Write-Output "Using version from tag: $version"
        }
        
        echo "VERSION=$version" >> $env:GITHUB_OUTPUT
        Write-Output "Final version: $version"
      shell: powershell
      
    - name: Update version in application
      run: |
        $version = "${{ steps.get_version.outputs.VERSION }}"
        $content = Get-Content version.py
        $content = $content -replace '__version__ = ".*"', "__version__ = `"$version`""
        $content | Set-Content version.py
        Write-Output "Updated version.py with version: $version"
      shell: powershell
      
    - name: Build executable with PyInstaller
      run: |
        Write-Output "Starting PyInstaller build..."
        $version = "${{ steps.get_version.outputs.VERSION }}"
        
        # Check if main.py exists
        if (-not (Test-Path "main.py")) {
          Write-Output "ERROR: main.py not found!"
          exit 1
        }

        # First try: Simple command line approach (most reliable)
        Write-Output "Trying simple command line build first..."
        try {
          # Use the same PyInstaller command that works locally
          pyinstaller --clean --onefile --windowed --name "SMIS-$version" main.py `
            --icon="resources/icons/app_icon.ico" `
            --add-data="resources;resources" `
            --add-data="ui;ui" `
            --add-data="config;config" `
            --add-data="docs;docs" `
            --hidden-import="PyQt5.sip" `
            --hidden-import="sqlite3" `
            --hidden-import="cryptography" `
            --hidden-import="bcrypt" `
            --hidden-import="PIL" `
            --hidden-import="PIL.Image" `
            --hidden-import="PIL.ImageTk" `
            --hidden-import="tkinter.ttk" `
            --hidden-import="tkinter.filedialog" `
            --hidden-import="controllers" `
            --hidden-import="pandas" `
            --hidden-import="openpyxl" `
            --hidden-import="reportlab" `
            --noupx --log-level INFO
        
        # ALWAYS build debug console version for troubleshooting
        Write-Output "Building debug console version for troubleshooting..."
        pyinstaller --clean --onefile --console --name "SMIS-$version-Debug" main.py `
          --icon="resources/icons/app_icon.ico" `
          --add-data="resources;resources" `
          --add-data="ui;ui" `
          --add-data="config;config" `
          --add-data="docs;docs" `
          --hidden-import="PyQt5.sip" `
          --hidden-import="sqlite3" `
          --hidden-import="cryptography" `
          --hidden-import="bcrypt" `
          --hidden-import="PIL" `
          --hidden-import="PIL.Image" `
          --hidden-import="PIL.ImageTk" `
          --hidden-import="tkinter.ttk" `
          --hidden-import="tkinter.filedialog" `
          --hidden-import="controllers" `
          --hidden-import="pandas" `
          --hidden-import="openpyxl" `
          --hidden-import="reportlab" `
          --noupx
          
          if (Test-Path "dist/SMIS-$version.exe") {
            Write-Output "✅ Simple build successful!"
            $fileSize = (Get-Item "dist/SMIS-$version.exe").Length / 1MB
            Write-Output "Executable size: $([math]::Round($fileSize, 2)) MB"
          }
        } catch {
          Write-Output "Simple build failed: $($_.Exception.Message)"
        }
        
        # ALWAYS build debug console version for troubleshooting
        Write-Output "Building debug console version for troubleshooting..."
        pyinstaller --clean --onefile --console --name "SMIS-$version-Debug" main.py `
          --icon="resources/icons/app_icon.ico" `
          --add-data="resources;resources" `
          --add-data="ui;ui" `
          --add-data="config;config" `
          --add-data="docs;docs" `
          --hidden-import="PyQt5.sip" `
          --hidden-import="sqlite3" `
          --hidden-import="cryptography" `
          --hidden-import="bcrypt" `
          --hidden-import="PIL" `
          --hidden-import="PIL.Image" `
          --hidden-import="PIL.ImageTk" `
          --hidden-import="tkinter.ttk" `
          --hidden-import="tkinter.filedialog" `
          --hidden-import="controllers" `
          --hidden-import="pandas" `
          --hidden-import="openpyxl" `
          --hidden-import="reportlab" `
          --noupx
        
        # Final fallback: Debug console build (if main build failed)
        if (-not (Test-Path "dist/SMIS-$version.exe")) {
          Write-Output "Main build failed, using debug console build as fallback..."
          if (Test-Path "dist/SMIS-$version-Debug.exe") {
            Copy-Item "dist/SMIS-$version-Debug.exe" "dist/SMIS-$version.exe"
            Write-Output "✅ Using debug version as main executable"
          }
        }
        
        # Check final result
        if (-not (Test-Path "dist/SMIS-$version.exe")) {
          Write-Output "ERROR: All PyInstaller build attempts failed!"
          Get-ChildItem dist -Name
          exit 1
        }
        
        Write-Output "✅ Build completed successfully!"
        Get-ChildItem dist -Name
        
        if (Test-Path "dist/SMIS-$version.exe") {
          Write-Output "Successfully built: SMIS-$version.exe"
          $fileSize = (Get-Item "dist/SMIS-$version.exe").Length / 1MB
          Write-Output "File size: $([math]::Round($fileSize, 2)) MB"
          
          # Test critical imports in the build environment
          Write-Output "Testing critical imports for bundling verification..."
          python -c "import dotenv, PyQt5.QtWidgets, cryptography, version; print('✅ All critical imports verified')"
          if ($LASTEXITCODE -eq 0) { 
            Write-Output "✅ Import verification successful" 
          } else { 
            Write-Output "❌ Import verification failed"
            exit 1 
          }
          
          Write-Output "✅ Executable build and verification completed"
        }
        
        Write-Output "Build phase completed successfully!"
        Get-ChildItem dist -Name | Sort-Object
      shell: powershell
        
    - name: Create Inno Setup installer
      run: |
        $version = "${{ steps.get_version.outputs.VERSION }}"
        if (-not (Test-Path "setup_script.iss")) {
          Write-Output "ERROR: setup_script.iss not found"; exit 1
        }
        
        # Check if executable was built successfully
        $executablePath = "dist/SMIS-$version.exe"
        if (-not (Test-Path $executablePath)) {
          Write-Output "ERROR: PyInstaller output not found: $executablePath"
          Write-Output "Available files in dist folder:"
          Get-ChildItem dist -Name
          exit 1
        }
        
        # Rename executable to SMIS.exe for Inno Setup script
        if (Test-Path "dist/SMIS.exe") { Remove-Item "dist/SMIS.exe" -Force }
        Copy-Item $executablePath "dist/SMIS.exe"
        Write-Output "Copied $executablePath to dist/SMIS.exe for Inno Setup"
        
        Write-Output "Building installer for: $executablePath"
        $fileSize = (Get-Item $executablePath).Length / 1MB
        Write-Output "Executable size: $([math]::Round($fileSize, 2)) MB"
        Write-Output "Checking icon path (resources/icons):"
        if (Test-Path "resources/icons") { Get-ChildItem -Recurse -Path resources/icons } else { Write-Output "resources/icons directory missing" }
        if (Test-Path "resources/icons/app_icon.ico") { echo "Icon file found." } else { echo "WARNING: resources/icons/app_icon.ico not found; build will continue with default icon." }
        
        # Update Inno Setup script with current version
        $issContent = Get-Content "setup_script.iss" -Raw
        $issContent = $issContent -replace "AppVersion=2\.3\.4", "AppVersion=$version"
        $issContent = $issContent -replace "SMIS_Setup_v2\.3\.4", "SMIS_Setup_v$version"
        $issContent = $issContent -replace "v2\.3\.4", "v$version"
        $issContent | Set-Content "setup_script.iss"
        Write-Output "Updated setup_script.iss with version $version"
        
        # Create installer directory if it doesn't exist
        if (-not (Test-Path "installer")) { New-Item -ItemType Directory -Force -Path "installer" }
        
        # Path to Inno Setup Compiler (usually in Program Files (x86))
        $iscc = "C:/Program Files (x86)/Inno Setup 6/ISCC.exe"
        if (-not (Test-Path $iscc)) { $iscc = "C:/Program Files/Inno Setup 6/ISCC.exe" }
        if (-not (Test-Path $iscc)) {
          echo "Inno Setup not found. Attempting silent installation..."
          $temp = "$env:RUNNER_TEMP/innosetup"
          New-Item -ItemType Directory -Force -Path $temp | Out-Null
          $innoUrl = "https://jrsoftware.org/download.php/is.exe"
          $installerPath = Join-Path $temp "innosetup.exe"
          echo "Downloading Inno Setup from $innoUrl"
          Invoke-WebRequest -Uri $innoUrl -OutFile $installerPath -UseBasicParsing
          if (-not (Test-Path $installerPath)) { echo "ERROR: Failed to download Inno Setup installer"; exit 1 }
          echo "Running silent Inno Setup installer..."
          Start-Process -FilePath $installerPath -ArgumentList "/SILENT", "/SUPPRESSMSGBOXES" -Wait -NoNewWindow
          # Re-check standard install locations
          $iscc = "C:/Program Files (x86)/Inno Setup 6/ISCC.exe"
          if (-not (Test-Path $iscc)) { $iscc = "C:/Program Files/Inno Setup 6/ISCC.exe" }
          if (-not (Test-Path $iscc)) { echo "ERROR: ISCC still not found after install"; exit 1 }
          echo "Inno Setup installed successfully. Proceeding with build."
        }
        & "$iscc" "setup_script.iss"
        if ($LASTEXITCODE -ne 0) { echo "Inno Setup build failed"; exit 1 }
        
        $expectedInstaller = "installer/SMIS_Setup_v$version.exe"
        if (-not (Test-Path $expectedInstaller)) { 
          echo "ERROR: Expected Inno Setup output $expectedInstaller missing"
          Write-Output "Available files in installer folder:"
          if (Test-Path "installer") { Get-ChildItem installer -Name }
          exit 1 
        }
        
        # Copy installer to root for encryption step
        Copy-Item $expectedInstaller "SMIS-Setup-$version.exe"
        echo "Inno Setup installer created: SMIS-Setup-$version.exe"
        
        Write-Output "✅ Inno Setup installer build completed successfully!"
      shell: powershell
      
    - name: Encrypt installer
      run: |
        python -c "
        import os
        from cryptography.fernet import Fernet
        import base64
        
        # Get encryption key from environment
        key = os.environ['ENCRYPT_KEY'].encode()
        # Ensure key is 32 bytes for Fernet (base64 encoded)
        if len(key) != 44:  # 32 bytes base64 encoded = 44 chars
            # If key is not base64, create a proper key
            from cryptography.hazmat.primitives import hashes
            from cryptography.hazmat.primitives.kdf.pbkdf2 import PBKDF2HMAC
            kdf = PBKDF2HMAC(
                algorithm=hashes.SHA256(),
                length=32,
                salt=b'smis_salt_2024',
                iterations=100000,
            )
            key = base64.urlsafe_b64encode(kdf.derive(key))
        
        f = Fernet(key)
        
        version = '${{ steps.get_version.outputs.VERSION }}'
        installer_path = f'SMIS-Setup-{version}.exe'
        encrypted_path = f'SMIS-Setup-{version}-encrypted.exe'
        
        with open(installer_path, 'rb') as file:
            file_data = file.read()
        
        encrypted_data = f.encrypt(file_data)
        
        with open(encrypted_path, 'wb') as file:
            file.write(encrypted_data)
            
        print(f'Encrypted {installer_path} -> {encrypted_path}')
        print(f'Original size: {len(file_data)} bytes')
        print(f'Encrypted size: {len(encrypted_data)} bytes')
        
        # Remove original unencrypted file (but keep a backup)
        backup_path = f'SMIS-Setup-{version}-unencrypted.exe'
        os.rename(installer_path, backup_path)
        print(f'Original installer backed up as: {backup_path}')
        "
      env:
        ENCRYPT_KEY: ${{ secrets.ENCRYPT_KEY }}
        
    - name: Calculate file hashes
      id: hash
      run: |
        $version = "${{ steps.get_version.outputs.VERSION }}"
        $filePath = "SMIS-Setup-$version-encrypted.exe"
        $sha256 = (Get-FileHash -Path $filePath -Algorithm SHA256).Hash
        echo "SHA256=$sha256" >> $env:GITHUB_OUTPUT
        echo "File: $filePath"
        echo "SHA256: $sha256"
      shell: powershell
      
    - name: Create or update release
      id: create_release
      uses: softprops/action-gh-release@v2
      with:
        tag_name: "v${{ steps.get_version.outputs.VERSION }}"
        name: "SMIS v${{ steps.get_version.outputs.VERSION }}"
        make_latest: true
        draft: false
        prerelease: false
        body: |
          ## SMIS v${{ steps.get_version.outputs.VERSION }}
          
          ### What's New
          - Auto-generated release from tag v${{ steps.get_version.outputs.VERSION }}
          - Built with Inno Setup installer for enhanced security and user experience
          - Encrypted installer with AES encryption
          - Built on ${{ github.run_number }} workflow run
          
          ### Installation
          
          **Standard Installation (Recommended):**
          1. Download: `SMIS-Setup-${{ steps.get_version.outputs.VERSION }}-unencrypted.exe`
          2. Right-click → "Run as Administrator"
          3. Follow the installation wizard
          4. If Windows warns, click "More info" → "Run anyway"
          
          ### Features
          - ✅ Professional Inno Setup installer with app icon
          - ✅ Single executable (no multiple files)
          - ✅ Clean Start Menu and Desktop shortcuts
          - ✅ Enhanced PyQt5 module inclusion
          - ✅ Optimized for maximum compatibility
          - ✅ Smart uninstaller with optional data cleanup
          - ✅ Fresh installation reset functionality
          
          ### File Information
          - **Installer**: SMIS-Setup-${{ steps.get_version.outputs.VERSION }}-unencrypted.exe (Inno Setup)
          - **Debug Executable**: SMIS-${{ steps.get_version.outputs.VERSION }}-Debug.exe (for troubleshooting)
          - **SHA256**: ${{ steps.hash.outputs.SHA256 }}
          - **Build Date**: ${{ github.event.head_commit.timestamp }}
          
          ### Troubleshooting
          If the installer doesn't work, download the Debug version:
          1. Download: `SMIS-${{ steps.get_version.outputs.VERSION }}-Debug.exe`
          2. Run it from Command Prompt to see any error messages
          3. This console version shows all startup errors for diagnosis
          
          ### Security
          This installer is encrypted with AES encryption for security.
          The Inno Setup installer provides a professional installation experience with proper Windows integration.
        files: |
          SMIS-Setup-${{ steps.get_version.outputs.VERSION }}-unencrypted.exe
          dist/SMIS-${{ steps.get_version.outputs.VERSION }}-Debug.exe
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: smis-installer-v${{ steps.get_version.outputs.VERSION }}
        path: |
          SMIS-Setup-${{ steps.get_version.outputs.VERSION }}-unencrypted.exe
          dist/SMIS-${{ steps.get_version.outputs.VERSION }}-Debug.exe
        retention-days: 30
        
    - name: Notify build completion
      run: |
        # Ensure consistent encoding (avoid emoji/unicode parsing issues on some runners)
        [Console]::OutputEncoding = [System.Text.Encoding]::UTF8
        $version = "${{ steps.get_version.outputs.VERSION }}"
        $downloadUrl = "https://github.com/ZubairHussainK/smis/releases/tag/v" + $version

        Write-Output "Build completed successfully."
        Write-Output "Release created and updated."
        Write-Output "Encrypted installer uploaded."
        Write-Output ("Version: " + $version)
        Write-Output ("Download URL: " + $downloadUrl)
      shell: powershell