name: Build and Release Windows Application

on:
  push:
    tags:
      - 'v*'  # Triggers on version tags like v1.2.3
  workflow_dispatch:  # Allows manual trigger from GitHub Actions tab

permissions:
  contents: write
  packages: read

jobs:
  build-and-release:
    # Using specific Windows version to avoid migration issues
    # windows-latest will migrate to Windows Server 2025 on Sept 2, 2025
    # Using windows-2022 for stability and consistency
    runs-on: windows-2022
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        
        # Force install critical dependencies first
        Write-Output "Installing critical dependencies..."
        pip install python-dotenv==1.0.0
        pip install PyQt5>=5.15.9
        pip install cryptography==41.0.3
        pip install requests==2.31.0
        pip install pyinstaller
        
        # Check if requirements.txt exists and install additional dependencies
        if (Test-Path "requirements.txt") {
          Write-Output "Installing from requirements.txt..."
          pip install -r requirements.txt
        }
        
        # Force reinstall python-dotenv to ensure it's available
        pip install --force-reinstall python-dotenv==1.0.0
        
        # Verify critical imports
        Write-Output "Verifying critical imports..."
        python -c "
        try:
            from dotenv import load_dotenv
            print('✅ dotenv import successful')
            import PyQt5
            print('✅ PyQt5 import successful') 
            import cryptography
            print('✅ cryptography import successful')
            import requests
            print('✅ requests import successful')
        except ImportError as e:
            print(f'❌ Import error: {e}')
            exit(1)
        "
        
        Write-Output "Dependencies installed successfully"
      shell: powershell
      
    - name: Verify Python environment
      run: |
        Write-Output "Python version:"
        python --version
        
        Write-Output "Installed packages:"
        pip list
        
        Write-Output "Testing main.py imports..."
        python -c "
        try:
            import sys
            import os
            sys.path.insert(0, '.')
            print('Testing basic imports...')
            
            # Test dotenv import specifically
            try:
                from dotenv import load_dotenv
                print('✅ dotenv import successful')
            except ImportError as e:
                print(f'❌ dotenv import failed: {e}')
                print('Installing python-dotenv as fallback...')
                import subprocess
                subprocess.run([sys.executable, '-m', 'pip', 'install', 'python-dotenv'])
                from dotenv import load_dotenv
                print('✅ dotenv import successful after fallback install')
            
            print('✅ Python environment ready')
        except Exception as e:
            print(f'❌ Import error: {e}')
            exit(1)
        "
      shell: powershell
        
    - name: Extract version from tag
      id: get_version
      run: |
        $ref = "${{ github.ref_name }}"
        
        # If triggered by workflow_dispatch or from main branch, use version from version.py
        if ($ref -eq "main" -or $ref -notmatch "^v\d+\.\d+\.\d+") {
          if (Test-Path "version.py") {
            $content = Get-Content version.py
            $version = ($content | Select-String '__version__ = "(.+)"' | ForEach-Object { $_.Matches.Groups[1].Value })
            if (-not $version) {
              $version = "2.0.2"  # Default fallback version
            }
          } else {
            $version = "2.0.2"  # Default fallback version
          }
          Write-Output "Using version from version.py or default: $version"
        } else {
          # Extract version from tag (remove 'v' prefix)
          $version = $ref -replace '^v', ''
          Write-Output "Using version from tag: $version"
        }
        
        echo "VERSION=$version" >> $env:GITHUB_OUTPUT
        Write-Output "Final version: $version"
      shell: powershell
      
    - name: Update version in application
      run: |
        $version = "${{ steps.get_version.outputs.VERSION }}"
        $content = Get-Content version.py
        $content = $content -replace '__version__ = ".*"', "__version__ = `"$version`""
        $content | Set-Content version.py
        Write-Output "Updated version.py with version: $version"
      shell: powershell
      
    - name: Build executable with PyInstaller
      run: |
        Write-Output "Starting PyInstaller build..."
        $version = "${{ steps.get_version.outputs.VERSION }}"
        
        # Check if main.py exists
        if (-not (Test-Path "main.py")) {
          Write-Output "ERROR: main.py not found!"
          exit 1
        }

        # First try: Simple command line approach (most reliable)
        Write-Output "Trying simple command line build first..."
        try {
          # Add comprehensive dotenv imports to ensure bundling
          pyinstaller --onefile --windowed --name "SMIS-$version" main.py `
            --distpath dist --workpath build-simple `
            --add-data "resources;resources" `
            --add-data "config;config" `
            --collect-all PyQt5 `
            --collect-all dotenv `
            --hidden-import PyQt5.sip `
            --hidden-import sip `
            --hidden-import sqlite3 `
            --hidden-import dotenv `
            --hidden-import dotenv.main `
            --hidden-import dotenv.parser `
            --hidden-import dotenv.core `
            --hidden-import python_dotenv `
            --hidden-import cryptography `
            --hidden-import cryptography.fernet `
            --hidden-import cryptography.hazmat `
            --hidden-import cryptography.hazmat.primitives `
            --hidden-import cryptography.hazmat.backends `
            --hidden-import requests `
            --hidden-import urllib3 `
            --hidden-import urllib3.util `
            --hidden-import urllib3.exceptions `
            --hidden-import certifi `
            --hidden-import json `
            --hidden-import email.mime `
            --icon "resources/icons/app_icon.ico" `
            --noupx --clean --log-level INFO
          
          if (Test-Path "dist/SMIS-$version.exe") {
            Write-Output "✅ Simple build successful!"
            $fileSize = (Get-Item "dist/SMIS-$version.exe").Length / 1MB
            Write-Output "Executable size: $([math]::Round($fileSize, 2)) MB"
          }
        } catch {
          Write-Output "Simple build failed: $($_.Exception.Message)"
        }
        
        # If simple build didn't work, try spec file approach
        if (-not (Test-Path "dist/SMIS-$version.exe")) {
          Write-Output "Trying spec file build..."
          
          # Update spec file with current version
          $specContent = Get-Content "SMIS.spec" -Raw
          $specContent = $specContent -replace "name='SMIS'", "name='SMIS-$version'"
          $specContent | Set-Content "SMIS.spec"
          
          try {
            pyinstaller SMIS.spec --distpath dist --workpath build --clean
            
            if (Test-Path "dist/SMIS-$version.exe") {
              Write-Output "✅ Spec file build successful"
            } elseif (Test-Path "dist/SMIS.exe") {
              Move-Item "dist/SMIS.exe" "dist/SMIS-$version.exe"
              Write-Output "✅ Renamed SMIS.exe to SMIS-$version.exe"
            }
          } catch {
            Write-Output "Spec build failed: $($_.Exception.Message)"
          }
        }
        
        # Final fallback: Debug console build
        if (-not (Test-Path "dist/SMIS-$version.exe")) {
          Write-Output "Trying debug console build..."
          pyinstaller --onefile --console --name "SMIS-$version" main.py `
            --distpath dist --workpath build-debug `
            --add-data "resources;resources" `
            --add-data "config;config" `
            --collect-all PyQt5 `
            --hidden-import PyQt5.sip `
            --hidden-import sip `
            --hidden-import dotenv `
            --hidden-import dotenv.main `
            --hidden-import cryptography `
            --hidden-import requests `
            --hidden-import urllib3 `
            --icon "resources/icons/app_icon.ico" `
            --noupx --clean
        }
        
        # Check final result
        if (-not (Test-Path "dist/SMIS-$version.exe")) {
          Write-Output "ERROR: All PyInstaller build attempts failed!"
          Get-ChildItem dist -Name
          exit 1
        }
        
        Write-Output "✅ Build completed successfully!"
        Get-ChildItem dist -Name
        
        if (Test-Path "dist/SMIS-$version.exe") {
          Write-Output "Successfully built: SMIS-$version.exe"
          $fileSize = (Get-Item "dist/SMIS-$version.exe").Length / 1MB
          Write-Output "File size: $([math]::Round($fileSize, 2)) MB"
          
          # Test critical imports in the build environment
          Write-Output "Testing critical imports for bundling verification..."
          python -c "
          try:
              from dotenv import load_dotenv
              print('✅ dotenv import successful')
              from PyQt5.QtWidgets import QApplication  
              print('✅ PyQt5 import successful')
              import cryptography
              print('✅ cryptography import successful')
              print('✅ All critical imports verified for bundling')
          except Exception as e:
              print(f'❌ Import verification failed: {e}')
              exit(1)
          "
          
          Write-Output "✅ Executable build and verification completed"
        }
        
        Write-Output "Build phase completed successfully!"
        Get-ChildItem dist -Name | Sort-Object
      shell: powershell
        
    - name: Create NSIS installer
      run: |
        $version = "${{ steps.get_version.outputs.VERSION }}"
        if (-not (Test-Path "installer.nsi")) {
          Write-Output "ERROR: installer.nsi not found"; exit 1
        }
        
        # Check if executable was built successfully
        $executablePath = "dist/SMIS-$version.exe"
        if (-not (Test-Path $executablePath)) {
          Write-Output "ERROR: PyInstaller output not found: $executablePath"
          Write-Output "Available files in dist folder:"
          Get-ChildItem dist -Name
          exit 1
        }
        
        Write-Output "Building installer for: $executablePath"
        $fileSize = (Get-Item $executablePath).Length / 1MB
        Write-Output "Executable size: $([math]::Round($fileSize, 2)) MB"
        Write-Output "Listing icon path (resources/icons):"
        if (Test-Path "resources/icons") { Get-ChildItem -Recurse -Path resources/icons } else { Write-Output "resources/icons directory missing" }
        if (Test-Path "resources/icons/app_icon.ico") { echo "Icon file found." } else { echo "WARNING: resources/icons/app_icon.ico not found; build will continue with default icon." }
        # Path to makensis (usually in Program Files (x86))
        $nsis = "C:/Program Files (x86)/NSIS/makensis.exe"
        if (-not (Test-Path $nsis)) { $nsis = "C:/Program Files/NSIS/makensis.exe" }
        if (-not (Test-Path $nsis)) {
          echo "makensis not found. Attempting silent installation of NSIS..."
          $temp = "$env:RUNNER_TEMP/nsis"
          New-Item -ItemType Directory -Force -Path $temp | Out-Null
          $nsisUrl = "https://downloads.sourceforge.net/project/nsis/NSIS%203/3.10/nsis-3.10-setup.exe"
          $installerPath = Join-Path $temp "nsis-setup.exe"
          echo "Downloading NSIS from $nsisUrl"
          Invoke-WebRequest -Uri $nsisUrl -OutFile $installerPath -UseBasicParsing
          if (-not (Test-Path $installerPath)) { echo "ERROR: Failed to download NSIS installer"; exit 1 }
          echo "Running silent NSIS installer..."
          Start-Process -FilePath $installerPath -ArgumentList "/S" -Wait -NoNewWindow
          # Re-check standard install locations
          $nsis = "C:/Program Files (x86)/NSIS/makensis.exe"
          if (-not (Test-Path $nsis)) { $nsis = "C:/Program Files/NSIS/makensis.exe" }
          if (-not (Test-Path $nsis)) { echo "ERROR: makensis still not found after install"; exit 1 }
          echo "NSIS installed successfully. Proceeding with build."
        }
        & "$nsis" /DVERSION=$version installer.nsi
        if ($LASTEXITCODE -ne 0) { echo "NSIS build failed"; exit 1 }
        if (-not (Test-Path "SMIS-Setup-$version.exe")) { echo "ERROR: Expected NSIS output SMIS-Setup-$version.exe missing"; Get-ChildItem -Path . -Filter "SMIS-Setup*"; exit 1 }
        echo "NSIS installer created: SMIS-Setup-$version.exe"
        
        # Create installation helper batch file
        echo "Creating installation helper..."
        Copy-Item "install_helper.bat" "SMIS-Install-Helper-$version.bat"
        
        # Create smart launcher for installed system
        Copy-Item "SMIS-SmartLauncher.bat" "dist/SMIS-SmartLauncher.bat"
      shell: powershell
      
    - name: Encrypt installer
      run: |
        python -c "
        import os
        from cryptography.fernet import Fernet
        import base64
        
        # Get encryption key from environment
        key = os.environ['ENCRYPT_KEY'].encode()
        # Ensure key is 32 bytes for Fernet (base64 encoded)
        if len(key) != 44:  # 32 bytes base64 encoded = 44 chars
            # If key is not base64, create a proper key
            from cryptography.hazmat.primitives import hashes
            from cryptography.hazmat.primitives.kdf.pbkdf2 import PBKDF2HMAC
            kdf = PBKDF2HMAC(
                algorithm=hashes.SHA256(),
                length=32,
                salt=b'smis_salt_2024',
                iterations=100000,
            )
            key = base64.urlsafe_b64encode(kdf.derive(key))
        
        f = Fernet(key)
        
        version = '${{ steps.get_version.outputs.VERSION }}'
        installer_path = f'SMIS-Setup-{version}.exe'
        encrypted_path = f'SMIS-Setup-{version}-encrypted.exe'
        
        with open(installer_path, 'rb') as file:
            file_data = file.read()
        
        encrypted_data = f.encrypt(file_data)
        
        with open(encrypted_path, 'wb') as file:
            file.write(encrypted_data)
            
        print(f'Encrypted {installer_path} -> {encrypted_path}')
        print(f'Original size: {len(file_data)} bytes')
        print(f'Encrypted size: {len(encrypted_data)} bytes')
        
        # Remove original unencrypted file (but keep a backup)
        backup_path = f'SMIS-Setup-{version}-unencrypted.exe'
        os.rename(installer_path, backup_path)
        print(f'Original installer backed up as: {backup_path}')
        "
      env:
        ENCRYPT_KEY: ${{ secrets.ENCRYPT_KEY }}
        
    - name: Calculate file hashes
      id: hash
      run: |
        $version = "${{ steps.get_version.outputs.VERSION }}"
        $filePath = "SMIS-Setup-$version-encrypted.exe"
        $sha256 = (Get-FileHash -Path $filePath -Algorithm SHA256).Hash
        echo "SHA256=$sha256" >> $env:GITHUB_OUTPUT
        echo "File: $filePath"
        echo "SHA256: $sha256"
      shell: powershell
      
    - name: Create or update release
      id: create_release
      uses: softprops/action-gh-release@v2
      with:
        tag_name: "v${{ steps.get_version.outputs.VERSION }}"
        name: "SMIS v${{ steps.get_version.outputs.VERSION }}"
        make_latest: true
        draft: false
        prerelease: false
        body: |
          ## SMIS v${{ steps.get_version.outputs.VERSION }}
          
          ### What's New
          - Auto-generated release from tag v${{ steps.get_version.outputs.VERSION }}
          - Encrypted installer for enhanced security
          - Built on ${{ github.run_number }} workflow run
          
          ### Installation (2 Easy Options)
          
          **Option 1 - Easy Installation (Recommended):**
          1. Download: `SMIS-Install-Helper-${{ steps.get_version.outputs.VERSION }}.bat`
          2. Run as Administrator
          3. Follow the installation wizard
          
          **Option 2 - Direct Installation:**
          1. Download: `SMIS-Setup-${{ steps.get_version.outputs.VERSION }}-unencrypted.exe`
          2. Right-click → "Run as Administrator"
          3. If Windows warns, click "More info" → "Run anyway"
          
          ### What's Fixed in This Version
          - ✅ Single executable (no multiple files)
          - ✅ Single Start Menu entry (no folder)
          - ✅ Enhanced PyQt5 module inclusion
          - ✅ Optimized for maximum compatibility
          - ✅ Clean installation experience
          
          ### File Information
          - **Installer**: SMIS-Setup-${{ steps.get_version.outputs.VERSION }}-unencrypted.exe
          - **Helper**: SMIS-Install-Helper-${{ steps.get_version.outputs.VERSION }}.bat
          - **SHA256**: ${{ steps.hash.outputs.SHA256 }}
          - **Build Date**: ${{ github.event.head_commit.timestamp }}
          
          ### Security
          This installer is encrypted with AES encryption for security.
          The helper script temporarily adds Windows Defender exclusions for smooth installation.
        files: |
          SMIS-Setup-${{ steps.get_version.outputs.VERSION }}-unencrypted.exe
          SMIS-Install-Helper-${{ steps.get_version.outputs.VERSION }}.bat
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: smis-installer-v${{ steps.get_version.outputs.VERSION }}
        path: |
          SMIS-Setup-${{ steps.get_version.outputs.VERSION }}-unencrypted.exe
          SMIS-Install-Helper-${{ steps.get_version.outputs.VERSION }}.bat
        retention-days: 30
        
    - name: Notify build completion
      run: |
        # Ensure consistent encoding (avoid emoji/unicode parsing issues on some runners)
        [Console]::OutputEncoding = [System.Text.Encoding]::UTF8
        $version = "${{ steps.get_version.outputs.VERSION }}"
        $downloadUrl = "https://github.com/ZubairHussainK/smis/releases/tag/v" + $version

        Write-Output "Build completed successfully."
        Write-Output "Release created and updated."
        Write-Output "Encrypted installer uploaded."
        Write-Output ("Version: " + $version)
        Write-Output ("Download URL: " + $downloadUrl)
      shell: powershell